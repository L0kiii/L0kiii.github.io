<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>L0kiTown v1.0</title>
      <link href="/2020/05/13/L0kiTown-v1.0/"/>
      <url>/2020/05/13/L0kiTown-v1.0/</url>
      
        <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>I’ve always wanted to integrate a learning center, and finally managed to do it. The 1.0 version includes a penetration testing lab, penetration testing tools, a penetration testing target range, a network disk, and a resource sharing center. You can access it <a href="https://demo.l0ki.net/">here</a>.</p><h2 id="User-Guide"><a href="#User-Guide" class="headerlink" title="User Guide"></a>User Guide</h2><h3 id="KODBOX"><a href="#KODBOX" class="headerlink" title="KODBOX"></a>KODBOX</h3><p>The KODBOX module is for network disk and document collaboration, etc., and registration is required.<br><img src="https://l0ki-town.oss-cn-beijing.aliyuncs.com/l0ki.top/image-20200602205103699.png" alt="image-20200602205103699"></p><h3 id="Pentest-Lab"><a href="#Pentest-Lab" class="headerlink" title="Pentest Lab"></a>Pentest Lab</h3><p>The Pentest Lab module is for penetration testing labs, which is not open to the public for now and is only used for my personal learning.</p><h3 id="Share-Center"><a href="#Share-Center" class="headerlink" title="Share Center"></a>Share Center</h3><p><img src="https://l0ki-town.oss-cn-beijing.aliyuncs.com/l0ki.top/image-20200602205213381.png" alt="image-20200602205213381"><br>The Share Center module is a sharing center, which includes a penetration testing target range, penetration testing tools, and a resource sharing center.</p><h4 id="Pentest-Ranges"><a href="#Pentest-Ranges" class="headerlink" title="Pentest Ranges"></a>Pentest Ranges</h4><p><img src="https://l0ki-town.oss-cn-beijing.aliyuncs.com/l0ki.top/image-20200604143044397.png" alt="image-20200604143044397"><img src="https://l0ki-town.oss-cn-beijing.aliyuncs.com/l0ki.top/image-20200604143107832.png" alt="image-20200604143107832"><br>This is a penetration testing target range. This module integrates all usable target ranges and is for learning purposes only.</p><h4 id="Pentest-Tools"><a href="#Pentest-Tools" class="headerlink" title="Pentest Tools"></a>Pentest Tools</h4><p><img src="https://l0ki-town.oss-cn-beijing.aliyuncs.com/l0ki.top/image-20200604143117977.png" alt="image-20200604143117977"><img src="https://l0ki-town.oss-cn-beijing.aliyuncs.com/l0ki.top/image-20200604143135098.png" alt="image-20200604143135098"><br>This is a penetration testing toolbox. This module integrates exploitable penetration testing tools. Among them, PocBox is produced by the MIST security team and can be used in conjunction with the DoraBox target range.</p><h4 id="Resources"><a href="#Resources" class="headerlink" title="Resources"></a>Resources</h4><p><img src="https://l0ki-town.oss-cn-beijing.aliyuncs.com/l0ki.top/image-20200604143157969.png" alt="image-20200604143157969"><img src="https://l0ki-town.oss-cn-beijing.aliyuncs.com/l0ki.top/image-20200604143210690.png" alt="image-20200604143210690"><br>This is a resource center. This module integrates downloadable PDF resources for learning, such as mini-program development, blue team system construction, etc.</p><h3 id="Contact-Me"><a href="#Contact-Me" class="headerlink" title="Contact Me"></a>Contact Me</h3><p><img src="https://l0ki-town.oss-cn-beijing.aliyuncs.com/l0ki.top/image-20200602205841633.png" alt="image-20200602205841633"><br>This module is my blog and can be used for learning and reference.</p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>L0kiTown was initially intended for my personal use. If it helps others in their learning, I will continue to upgrade and optimize it. If you have any suggestions, please feel free to leave a comment.</p><h3 id="To-be-developed"><a href="#To-be-developed" class="headerlink" title="To be developed"></a>To be developed</h3><ul><li>Blog wiki, <a href="https://www.mi1k7ea.com/tags/">reference</a></li><li>Toolbox production</li><li>Introduction of local penetration tool jump links</li><li>ifream online code writing</li><li>Markdown parsing code</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Notes on Gathering Information-1</title>
      <link href="/2019/09/23/Notes-on-Gathering-Information/"/>
      <url>/2019/09/23/Notes-on-Gathering-Information/</url>
      
        <content type="html"><![CDATA[<h1 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h1><ul><li><p>HTTrack:网站克隆</p></li><li><p>Google指令——利用谷歌搜索实践</p></li><li><p>The Harvester:挖掘并利用邮箱地址</p></li><li><p>Whois</p></li><li><p>Netcraft</p></li><li><p>host 工具</p></li><li><p>从DNS中提取信息</p></li><li><p>从电子邮件服务器中提取信息</p></li><li><p>MetaGooFil</p></li><li><p>社会工程学</p></li><li><p>筛选提炼信息：找到可攻击目标</p></li></ul><h1 id="对信息收集的认识误区"><a href="#对信息收集的认识误区" class="headerlink" title="对信息收集的认识误区"></a>对信息收集的认识误区</h1><p>信息收集是渗透测试的中最不受重视的一个环节</p><blockquote><p>这样的认识很明显是打错特所的，正相反，这是最重要的一步，但也是最容易被忽略的一步，那么它的影响程度到底有多大呢？<br>可以毫不夸张的说，在收集目标信息上所花费的时间越多，后续阶段的成功率也就越高。</p></blockquote><h1 id="信息收集浅谈"><a href="#信息收集浅谈" class="headerlink" title="信息收集浅谈"></a>信息收集浅谈</h1><p>信息收集主要分为主动和被动</p><p>主动收集：与目标系统的直接交互，目标系统可能会记录下我们的IP地址及活动</p><p>被动收集：利用Google获取海量信息，不会与目标交互，不会被记录活动</p><p>信息收集的目的在于尽可能多的收集与目标相关的信息。并且收集信息的时候要尽可能将数据集中保存起来。</p><h3 id="HTTrack"><a href="#HTTrack" class="headerlink" title="HTTrack"></a>HTTrack</h3><p>当浏览或者探测某个网站的时间越多，那么我们的活动就越有可能被跟踪(哪怕只是随意的浏览网站)，只要是属于目标的资源，任何时候与之交互都有可能留下痕迹。</p><p>利用HTTrack我们可以从某个网站的本地副本中提取额外或者隐藏的信息<br>HTTrack可以将整个网页逐页下载下来，通过它可以建立完全的脱机副本。<br>Kali命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install webhttrack</span><br></pre></td></tr></table></figure><h3 id="关注点"><a href="#关注点" class="headerlink" title="关注点"></a>关注点</h3><p>物理地址和位置、电话号码、电子邮箱地址、运营时间、商业关系、员工姓名、与社会化媒体的联系、以及其他公开的花絮趣闻等等</p><p>综上所述，我们要彻查目标网站，对目标有一个全面的了解：是什么(这是一家什么样的公司)、做什么(具体做什么业务)、公司设在哪里。</p><p>在有了这些基本信息之后，我们可以进入被动侦察(即，被动收集)阶段。</p><h3 id="被动侦察"><a href="#被动侦察" class="headerlink" title="被动侦察"></a>被动侦察</h3><p>首先要做的事利用各大搜索引擎对目标进行地毯式的搜索</p><p>不过 仅仅利用好谷歌，我们就可以完成整个渗透测试工作<br>(推荐看Google Hacking  作者:Jonny)</p><p>不得不提一点，在我们被动侦擦过程中，如果我们点击搜索结果的任何一条链接，都会与目标建立系统的联系，也就回到了主动侦察的模式。。。。。</p><h3 id="Google指令——搜索实践"><a href="#Google指令——搜索实践" class="headerlink" title="Google指令——搜索实践"></a>Google指令——搜索实践</h3><p>指令格式：<br>1)你想要用的指令<br>2)半角冒号<br>3)指令中要用到的具体内容</p><p>Eg:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">site:domain term(搜索某网站我们想知道的信息)</span><br></pre></td></tr></table></figure><p>allintitle:网页标题必须包含所有的关键字才会出现在搜索结果里<br>intitle:只需包含任意一个关键字即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">allintitle:index of(查看web服务器上的所有可用的索引目录列表)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">inurl:admin(这条命令用于发现目标网站的管理或者设者页面)</span><br></pre></td></tr></table></figure><blockquote><p>使用Google快照会减少在目标服务器上留下痕迹，而且有机会浏览到原网站已移除的网页和文件。只要是谷歌爬虫抓取过的页面，都会在网页快照中保存一个精简的副本。</p></blockquote><p>cache:让谷歌只显示网页快照里的信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cache:domain</span><br></pre></td></tr></table></figure><p>filetype:搜索特定文件的扩展名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">filetype:pdf</span><br></pre></td></tr></table></figure><p>命令结合使用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">site:domain filetype:xxx(搜索某网站所有xxx格式的文件)</span><br></pre></td></tr></table></figure><h3 id="利用社交资源"><a href="#利用社交资源" class="headerlink" title="利用社交资源"></a>利用社交资源</h3><p>当我们彻查完目标网页，并借助谷歌服务我们之后，其他社交媒体也会发挥作用。</p><p>一些论坛，或者新闻中心等等可能会出现关于目标的言论，如技术问题。</p><p>简言之，公共论坛算是分享信息并寻求技术支持的宝地。</p><h3 id="The-Harvester"><a href="#The-Harvester" class="headerlink" title="The Harvester"></a>The Harvester</h3><p>….</p>]]></content>
      
      
      
        <tags>
            
            <tag> Notes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ISCC 2019-MISC</title>
      <link href="/2019/05/14/ISCC2019-MISC/"/>
      <url>/2019/05/14/ISCC2019-MISC/</url>
      
        <content type="html"><![CDATA[<h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="1"><a href="#1" class="headerlink" title="1"></a>1</h3><p>进制——&gt;ASCII——&gt;base64</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="built_in">str</span> = <span class="string">&#x27;0126 062 0126 0163 0142 0103 0102 0153 0142 062 065 0154 0111 0121 0157 0113 0111 0105 0132 0163 0131 0127 0143 066 0111 0105 0154 0124 0121 060 0116 067 0124 0152 0102 0146 0115 0107 065 0154 0130 062 0116 0150 0142 0154 071 0172 0144 0104 0102 0167 0130 063 0153 0167 0144 0130 060 0113&#x27;</span></span><br><span class="line">tmp = <span class="built_in">str</span>.split( )</span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> tmp:</span><br><span class="line">    flag += <span class="built_in">chr</span>(<span class="built_in">int</span>(i, <span class="number">8</span>))</span><br><span class="line"><span class="built_in">print</span>(base64.b64decode(flag))</span><br></pre></td></tr></table></figure><h3 id="2"><a href="#2" class="headerlink" title="2"></a>2</h3><p>StegSolve——&gt;data analyze——&gt;字符颠倒<br><a href="https://i.loli.net/2019/05/06/5ccfd01f95d4e.png" title="倒立屋"><img src="https://i.loli.net/2019/05/06/5ccfd01f95d4e.png" alt="倒立屋" title="倒立屋"></a><br>将图片在Steg中数据分析调至最低位，会发现第一行有一串很像flag的字符，尝试提交报错，更改格式报错，再结合题目，倒立屋，尝试将字符串颠倒过来提交，即按从右往左的顺序，发现对了（这道题的flag有点东西）</p><h3 id="3"><a href="#3" class="headerlink" title="3"></a>3</h3><p>提取——&gt;联想——&gt;比划<br>在附件中我们发现有{}，不难猜到肯定是flag，我们进行提取得到</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;WSXIUYHNBVTRFVBTRFVBQWERTYQAZSCEWSXCDEEFVTYHNMKJTGBNMJUYGRDXCVBMNBVCDRTGHUWSXCFEQWERTYTRFVBWSXNBVCXSWERFRFVGYHNWSXCDEMNBVCDRTGHU&#125;</span><br></pre></td></tr></table></figure><p>这么长一串，但是看起来又不像加密过的，回到原题“Keyes’ secret”，联想一下,key会不会是keyboard,再观察提取的字符，突然发现这些字母连起来在键盘上画出来是会是其他的字母形状，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">WSX----------------------I</span><br><span class="line">IUYHNBV---------------S</span><br><span class="line">TRFVB------------------C</span><br><span class="line">QAZSEC----------------K</span><br><span class="line">WSXCDE---------------E</span><br><span class="line">EFVT---------------------Y</span><br><span class="line">YHNMKJ----------------B</span><br><span class="line">TGBNMJU--------------O</span><br><span class="line">GRDXCVB--------------A</span><br><span class="line">MNBVCDRTGHU-----R</span><br><span class="line">WSXCFE----------------D</span><br><span class="line">NBVCXSWERF--------P</span><br><span class="line">RFVGYHN--------------H</span><br><span class="line">MNBVCDRTGHU-----R</span><br></pre></td></tr></table></figure><p>以上就是键盘中的秘密</p><h3 id="4"><a href="#4" class="headerlink" title="4"></a>4</h3><p>题目——&gt;winhex——&gt;AES+key解密<br>观察题目有三个比较敏感的字母AES，不难猜到这道题是AES解码，既然解码就要找到密文，故我们将GIF动图放到winhex中，发现最低端有一行特立独行的密文，<a href="https://i.loli.net/2019/05/06/5ccfd67f8f4a4.png" title="winhex"><img src="https://i.loli.net/2019/05/06/5ccfd67f8f4a4.png" alt="winhex" title="winhex"></a><br>进行解码，发现需要提供key,猜想这是什么比赛，哦,ISCC，尝试设置为ISCC，解码，<br><a href="https://i.loli.net/2019/05/06/5ccfd6b00c2cb.png" title="AES"><img src="https://i.loli.net/2019/05/06/5ccfd6b00c2cb.png" alt="AES" title="AES"></a>发现成功了，再次进行解码，得到flag</p><h3 id="5"><a href="#5" class="headerlink" title="5"></a>5</h3><p>binwalk——&gt;python3<br>用过很多信息隐藏提取的工具都没有用，经过尝试，发现binwalk可以将此图分离<br><a href="https://i.loli.net/2019/05/06/5cd035b040d11.png" title="binwalk"><img src="https://i.loli.net/2019/05/06/5cd035b040d11.png" alt="binwalk" title="binwalk"></a><br>得到10个碎片图<br>并且得到一张说明提示</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">纸机中居然是一堆黑色和白色的碎片，但是这些碎片之中到底会有什么样的宝藏呢？</span><br><span class="line"></span><br><span class="line">我去问了欧鹏·曦文同学，他说他有办法恢复拼图原貌，但是前提是要我把真正有用的东西给他。</span><br></pre></td></tr></table></figure><p>附脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line">flag_pic = Image.new(<span class="string">&quot;RGBA&quot;</span>,(<span class="number">143</span>,<span class="number">50</span>),(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> fn <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">11</span>):  <span class="comment">#循环出现文件名的后缀数字</span></span><br><span class="line"></span><br><span class="line">    fp=<span class="built_in">open</span>(<span class="string">r&#x27;/root/文档/CTF/fsj/fsj2/puzzle&#x27;</span>+<span class="built_in">str</span>(fn)+<span class="string">&#x27;.jpg&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>)  <span class="comment">#此处为文件路径及文件名</span></span><br><span class="line"></span><br><span class="line">    all_data=<span class="built_in">bytearray</span>(fp.read())</span><br><span class="line"></span><br><span class="line">    data=all_data[-<span class="number">1250</span>:]                           <span class="comment">#读图片最后1250位</span></span><br><span class="line"></span><br><span class="line">    pic = Image.new(<span class="string">&quot;RGBA&quot;</span>,(<span class="number">50</span>,<span class="number">50</span>),(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>))   <span class="comment">#新建图像对象,RGBA通道,xy轴为50,颜色为white(255,255,255)</span></span><br><span class="line"></span><br><span class="line">    dex=<span class="number">0</span>                                           <span class="comment">#初始化标记位为0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">25</span>):</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">25</span>):                       <span class="comment">#两层循环,写入图片上半部分颜色</span></span><br><span class="line"></span><br><span class="line">            pic.putpixel((j,i),(<span class="number">255</span>-data[dex],<span class="number">255</span>-data[dex],<span class="number">255</span>-data[dex])) <span class="comment">#设置坐标(j,i) 颜色为(255-data[dex],255-data[dex],255-data[dex])</span></span><br><span class="line"></span><br><span class="line">            dex=dex+<span class="number">1</span>                                                       <span class="comment">#标记位+1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">25</span>):</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">25</span>):                       <span class="comment">#两层循环,写入图片下半部分颜色</span></span><br><span class="line"></span><br><span class="line">            pic.putpixel((j,i+<span class="number">25</span>),(<span class="number">255</span>-data[dex],<span class="number">255</span>-data[dex],<span class="number">255</span>-data[dex]))  <span class="comment">#设置坐标(j,i+25) RGB值同上</span></span><br><span class="line"></span><br><span class="line">            dex=dex+<span class="number">1</span>                                                       <span class="comment">#标记位+1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">50</span>):</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">13</span>,<span class="number">1</span>):</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> pic.getpixel((x,y)) &lt; pic.getpixel((x+<span class="number">13</span>,y)):    <span class="comment">#若x轴0~12的像素值 小于 13~25的值,则写入 0~12的像素值</span></span><br><span class="line"></span><br><span class="line">                flag_pic.putpixel((x+fn*<span class="number">13</span>,y),pic.getpixel((x,y)))</span><br><span class="line"></span><br><span class="line">            <span class="keyword">else</span>:                                               <span class="comment">#否则写入后 13~25的像素值</span></span><br><span class="line"></span><br><span class="line">                flag_pic.putpixel((x+fn*<span class="number">13</span>,y),pic.getpixel((x+<span class="number">13</span>,y)))</span><br><span class="line"></span><br><span class="line">flag_pic.show()</span><br></pre></td></tr></table></figure><p>得出<br><a href="https://i.loli.net/2019/05/06/5cd03841efaf8.png" title="欧鹏·曦文"><img src="https://i.loli.net/2019/05/06/5cd03841efaf8.png" alt="欧鹏·曦文" title="欧鹏·曦文"></a></p>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Troubleshooting Docker Installation on Kali Linux</title>
      <link href="/2019/05/14/Troubleshooting-Docker-Installation-on-Kali-Linux/"/>
      <url>/2019/05/14/Troubleshooting-Docker-Installation-on-Kali-Linux/</url>
      
        <content type="html"><![CDATA[<p>Kali安装docker:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">apt-key adv --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys 58118E89F3A912897C070ADBF76221572C52609D</span><br><span class="line">echo &#x27;deb https://apt.dockerproject.org/repo debian-stretch main&#x27; &gt; /etc/apt/sources.list.d/docker.list</span><br><span class="line">apt-get install apt-transport-https ca-certificates</span><br><span class="line">apt-get update &amp;&amp; sudo apt-get install docker-engine</span><br><span class="line">systemctl start docker</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>使用加速器加快镜像的下载</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vi  /etc/docker/daemon.json</span><br><span class="line">输入一下内容即可</span><br><span class="line">&#123;&quot;registry-mirrors&quot;:[&quot;https://registry.docker-cn.com&quot;]&#125;</span><br></pre></td></tr></table></figure><h3 id="Error"><a href="#Error" class="headerlink" title="Error:"></a>Error:</h3><p>如果用完docker未通过正确方式关闭，导致下次docker无法开启，那么解决方案：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">rm -rf /var/lib/docker/</span><br><span class="line">vim /etc/docker/daemon.json</span><br><span class="line">add：</span><br><span class="line"> &#123; &quot;graph&quot;: &quot;/mnt/docker-data&quot;, &quot;storage-driver&quot;: &quot;overlay&quot; &#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Issues </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
